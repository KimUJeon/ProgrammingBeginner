# 캡슐화: 데이터를 캡슐화(은닉화)를 해, 상황에 따라 프로그램 외부에서 접근 가능한 데이터를 지정할 수 있다
# 추상화: OOP에서 제공하는 함수/데이터 모듈화의 일종으로 객체의 기본적인 틀, 뼈대만 미리 만들어 놓을 수 있는 기능이다
# 상속: OOP에서 제공하는 함수/데이터 모듈화의 일종으로 피상속 객체(부모 클래스)의 데이터 및 함수들을 상속 객체 그대로 이어 받아 사용할 수 있는 기능이다
# 다형성: 객체가 다양한 형태로 표현될 수 있다는 개념 "틀"을 가진 객체가 구체화된 객체로 표현될 수 있다

# 상속 - 클래스의 멤버를 물려준다는 의미

-------------------------------------------------------------------------------------------------------------

# Parent 클래스가 정의되고 멤버가 ilnt변수와 print라는 메소드로 구성이 되어있다.
# Child 클래스가 정의되며 extends를 작성했는데 이는 부모 클래스를 상속하게 해주는 구문으로 부모클래스의 private 멤버를 제외한 모든 멤버를 사용할 수 있다.
# 자식 클래스는 부모 클래스로부터 물려받은 멤버 외에 다른 멤버를 추가로 가질 수 있다.
# 자식 클래스에서 정의된 멤버는 부모 클래스 객체에서 사용할 수 없다.
# 자식 클래스 객체가 생성될 때 부모클래스 생성자가 무조건 콜 된다. 콜 순서 1. 부모클래스 생성자 2. 자식클래스 생성자

<접근 제한자>
# public - 제한 없음, protected - 자식 클래스에겐 public 그 외 private, NOT USE - 같은 패키지 public 그 외 private, private - 본인 객체 내에서만 사용 가능

public class Main {

	public static void main(String[] args) {
		Parent p = new Parent();
		Child c = new Child();
		
		p.print();
		c.print();
	}

}

// Parent 클래스 정의
class Parent {
		
	public int iInt;
	
	public void print() {
		System.out.println("Parent Class");
	}
}

// Child 클래스 정의
class Child extends Parent{

}

'''
Parent Class
Parent Class
'''
