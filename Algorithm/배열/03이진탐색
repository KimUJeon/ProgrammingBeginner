def solution(L, x):
    answer = 0
    start = 0
    end = len(L) - 1
    while start <= end:
        mid = (start + end) // 2
            
        if L[mid] == x:
            return mid
        elif L[mid] < x:
            start = mid + 1
        elif L[mid] > x:
            end = mid - 1

    return -1
    
[문제]
리스트 L 과, 그 안에서 찾으려 하는 원소 x 가 인자로 주어질 때, x 와 같은 값을 가지는 원소의 인덱스를 리턴하는 함수 solution() 을 완성하세요. 
만약 리스트 L 안에 x 와 같은 값을 가지는 원소가 존재하지 않는 경우에는 -1 을 리턴합니다. 
리스트 L 은 자연수 원소들로 이루어져 있으며, 크기 순으로 정렬되어 있다고 가정합니다.
또한, 동일한 원소는 두 번 이상 나타나지 않습니다.

예를 들어,
L = [2, 3, 5, 6, 9, 11, 15]
x = 6
의 인자들이 주어지면, L[3] == 6 이므로 3 을 리턴해야 합니다.

또 다른 예로,
L = [2, 5, 7, 9, 11]
x = 4
로 주어지면, 리스트 L 내에 4 의 원소가 존재하지 않으므로 -1 을 리턴해야 합니다.

이 연습문제에서는 알고리즘의 효율성도 평가합니다. 만약 순차 (선형) 탐색 알고리즘을 구현하는 경우에는
제한 시간 요구사항을 만족하지 못하여 효율성 테스트 케이스들을 통과하지 못할 수도 있습니다.

[메모]
탐색에는 많은 방법이 있으나 아주 기본적인 두가지는 알고 있어야 하는데 
선형 탐색(Linear search)/순차 탐색(Sequential search) : 단어 뜻 대로 순차적으로 모든 요소를 탐색해 배열의 길이에 따라
소요되는 시간이 다르고 최악의 경우엔 모든 원소를 다 검사해야 할 수 있는 탐색 방법임
이진 탐색(Binary Search) : 해당 탐색방법은 배열이 정렬되어 있는 경우에만 적용할 수 있는 방법으로 배열의 가운데 원소와
찾으려고 하는 원소의 크기를 비교해 탐색해야 할 방향을 정해 범위에 들지 않는 배열을 버리고 탐색해 선형 탐색보다
빠른 탐색 방법임.
